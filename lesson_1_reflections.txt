How did viewing a diff between two versions of a 
file help you see the bug that was introduced?

With diff I was able to see all changes between two files old and new.
As it appears in new file was changed that I put there unintentionally
and also some accidental changes. This accident changes was the bug.
With idff I was able to immediately see anintantial change that led to bug,
without diff it would take much more time.


	How could having easy access to the entire history of a file
make you a more efficient programmer in the long term?

It will help track and eliminate bugs.
It can help to make experiments.
It can help to track overall progress and contribution.

	What do you think are the pros and cons of manually 
choosing when to create a commit, like you do in Git,
vs having versions automatically saved, like Google docs does?

Cons: You need to decide by yourself is it a good time to commit.
So to commit you need to do some extra intellectual work;
You may forget to commit, so it will be hard to separate all
changes in good commits. Or you even can lost some data.
Pros: If done good, manually comments will be a fine logical
 peas of the program with good annotation.

	Why do you think some version control systems, 
like Git, allow saving multiple files in one commit, 
while others, like Google Docs, treat each file separately?

In systems where change in one file can affect other files and 
where to make one change you need to make same work in separate
files the saving multiple file in one commit would be convenient.
Like html and css files in web project.
In other systems where change in one file has no effect on other
file saving multiple files in one commit is not necessary.

How can you use the commands git log and git diff to view the history of files?
